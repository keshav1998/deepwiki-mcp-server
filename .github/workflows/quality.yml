name: Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security checks weekly on Mondays at 9 AM UTC
    - cron: "0 9 * * 1"

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Upload audit results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: .

  dependency-policy:
    name: Dependency Policy Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Check dependency policies
        run: cargo deny check

      - name: Upload deny results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-policy-results
          path: .config/deny.toml

  unused-dependencies:
    name: Unused Dependencies Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1

      - name: Install cargo-machete
        run: cargo install cargo-machete

      - name: Check for unused dependencies
        run: cargo machete

      - name: Upload machete results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: unused-dependencies-results
          path: Cargo.toml

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1
          components: clippy, rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy (WASM target)
        run: cargo clippy --target wasm32-wasip1 --all-targets --all-features -- -D warnings

      - name: Upload clippy results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: clippy-results
          path: .

  test-quality:
    name: Test Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Run tests
        run: cargo nextest run --all-features

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/nextest/

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1

      - name: Build extension (WASM)
        run: cargo build --target wasm32-wasip1 --release

      - name: Verify WASM output
        run: |
          if [ ! -f target/wasm32-wasip1/release/deepwiki_mcp_server.wasm ]; then
            echo "WASM build failed - no output file"
            exit 1
          fi
          echo "WASM build successful"
          ls -la target/wasm32-wasip1/release/deepwiki_mcp_server.wasm

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1

      - name: Check documentation
        run: cargo doc --target wasm32-wasip1 --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/wasm32-wasip1/doc/

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs:
      [
        security-audit,
        dependency-policy,
        unused-dependencies,
        code-quality,
        test-quality,
        build-verification,
        documentation-check,
      ]
    if: always()
    steps:
      - name: Quality Check Summary
        run: |
          echo "## Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Policy | ${{ needs.dependency-policy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unused Dependencies | ${{ needs.unused-dependencies.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Quality | ${{ needs.test-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Verification | ${{ needs.build-verification.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.documentation-check.result }} |" >> $GITHUB_STEP_SUMMARY

          # Check if all jobs passed
          if [[ "${{ needs.security-audit.result }}" == "success" && \
                "${{ needs.dependency-policy.result }}" == "success" && \
                "${{ needs.unused-dependencies.result }}" == "success" && \
                "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.test-quality.result }}" == "success" && \
                "${{ needs.build-verification.result }}" == "success" && \
                "${{ needs.documentation-check.result }}" == "success" ]]; then
            echo "✅ All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some quality checks failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
