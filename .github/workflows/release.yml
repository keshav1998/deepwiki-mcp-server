name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build Bridge Binary
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: deepwiki-mcp-bridge
            archive_ext: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: deepwiki-mcp-bridge
            archive_ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: deepwiki-mcp-bridge
            archive_ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: deepwiki-mcp-bridge
            archive_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: deepwiki-mcp-bridge.exe
            archive_ext: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Setup cross compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build bridge binary
        run: |
          cargo build --release --manifest-path crates/bridge/Cargo.toml --target ${{ matrix.target }} --locked

      - name: Prepare binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/
          chmod +x dist/${{ matrix.binary_name }}

      - name: Prepare binary (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir dist
          copy target\${{ matrix.target }}\release\${{ matrix.binary_name }} dist\

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          cd dist
          tar -czf ../deepwiki-mcp-bridge-${{ matrix.target }}.tar.gz ${{ matrix.binary_name }}

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          cd dist
          7z a ../deepwiki-mcp-bridge-${{ matrix.target }}.zip ${{ matrix.binary_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deepwiki-mcp-bridge-${{ matrix.target }}
          path: deepwiki-mcp-bridge-${{ matrix.target }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release-assets/
          done
          ls -la release-assets/

      - name: Get tag name
        id: tag_name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "## DeepWiki MCP Bridge ${{ steps.tag_name.outputs.TAG_NAME }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Features" >> $GITHUB_OUTPUT
          echo "- HTTP to STDIO bridge for Zed MCP context servers" >> $GITHUB_OUTPUT
          echo "- Support for DeepWiki and Devin AI services" >> $GITHUB_OUTPUT
          echo "- Cross-platform binaries for Linux, macOS, and Windows" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Installation" >> $GITHUB_OUTPUT
          echo "1. Download the appropriate binary for your platform" >> $GITHUB_OUTPUT
          echo "2. Extract the archive" >> $GITHUB_OUTPUT
          echo "3. Place the binary in your PATH or use with the Zed extension" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Platform Support" >> $GITHUB_OUTPUT
          echo "- **Linux**: x86_64 and aarch64 (ARM64)" >> $GITHUB_OUTPUT
          echo "- **macOS**: Intel (x86_64) and Apple Silicon (aarch64)" >> $GITHUB_OUTPUT
          echo "- **Windows**: x86_64" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Usage" >> $GITHUB_OUTPUT
          echo "This binary is automatically downloaded by the Zed extension, but can also be used standalone:" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "./deepwiki-mcp-bridge" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "For more information, see the [README](https://github.com/keshav1998/deepwiki-mcp-server/blob/main/README.md)." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          name: DeepWiki MCP Bridge ${{ steps.tag_name.outputs.TAG_NAME }}
          body: ${{ steps.release_notes.outputs.RELEASE_BODY }}
          files: |
            release-assets/deepwiki-mcp-bridge-x86_64-unknown-linux-gnu.tar.gz
            release-assets/deepwiki-mcp-bridge-aarch64-unknown-linux-gnu.tar.gz
            release-assets/deepwiki-mcp-bridge-x86_64-apple-darwin.tar.gz
            release-assets/deepwiki-mcp-bridge-aarch64-apple-darwin.tar.gz
            release-assets/deepwiki-mcp-bridge-x86_64-pc-windows-msvc.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-extension:
    name: Validate Zed Extension
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build extension (WASM)
        run: |
          echo "üåê Building Zed extension for WASM..."
          cargo build --manifest-path crates/extension/Cargo.toml --target wasm32-wasip1 --release --locked

      - name: Validate extension configuration
        run: |
          echo "‚úÖ Validating extension.toml..."
          if [ ! -f "extension.toml" ]; then
            echo "‚ùå extension.toml not found!"
            exit 1
          fi
          echo "‚úÖ extension.toml found"

      - name: Test extension build script
        run: |
          echo "üîß Testing build script..."
          chmod +x build.sh
          ./build.sh
