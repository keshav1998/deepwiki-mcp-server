name: Release Extension

on:
  push:
    tags:
      - "extension-v*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate-extension:
    name: Validate Extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1
          components: clippy, rustfmt

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: extension-wasm32-wasip1

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --target wasm32-wasip1 --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo nextest run --all-features

      - name: Build extension (WASM)
        run: cargo build --target wasm32-wasip1 --release

      - name: Validate extension configuration
        run: |
          echo "✅ Validating extension.toml..."
          if [ ! -f "extension.toml" ]; then
            echo "❌ extension.toml not found!"
            exit 1
          fi

          # Extract and validate version
          EXTENSION_VERSION=$(grep -E '^version = ' extension.toml | sed 's/version = "\(.*\)"/\1/')
          TAG_VERSION=${GITHUB_REF#refs/tags/extension-v}

          if [ "$EXTENSION_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch: extension.toml has $EXTENSION_VERSION but tag is $TAG_VERSION"
            exit 1
          fi

          echo "✅ extension.toml version matches tag: $EXTENSION_VERSION"

      - name: Package extension
        run: |
          mkdir -p dist

          # Copy WASM binary
          cp target/wasm32-wasip1/release/deepwiki_mcp_server.wasm dist/

          # Copy extension manifest
          cp extension.toml dist/

          # Copy configuration files
          cp -r configuration dist/

          # Copy documentation
          cp README.md dist/
          cp LICENSE dist/

          # Create extension package
          cd dist
          tar -czf ../deepwiki-mcp-server-extension.tar.gz .

          echo "✅ Extension packaged successfully"
          ls -la ../deepwiki-mcp-server-extension.tar.gz

      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: deepwiki-mcp-server-extension
          path: deepwiki-mcp-server-extension.tar.gz

  test-proxy-integration:
    name: Test Proxy Integration
    runs-on: ubuntu-latest
    needs: validate-extension
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Test proxy binary download
        run: |
          echo "🔍 Testing proxy binary download functionality..."

          # Run integration tests that verify proxy download
          cargo test test_proxy_binary_integration -- --nocapture

          echo "✅ Proxy integration tests passed"

      - name: Verify asset naming
        run: |
          echo "🔍 Verifying asset naming conventions..."

          # Test asset name generation for all platforms
          cargo test test_extension_proxy_compatibility -- --nocapture

          echo "✅ Asset naming verification passed"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-extension, test-proxy-integration]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download extension artifact
        uses: actions/download-artifact@v4
        with:
          name: deepwiki-mcp-server-extension

      - name: Get tag and version info
        id: tag_info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#extension-v}

          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          echo "📋 Release Info:"
          echo "  Tag: $TAG_NAME"
          echo "  Version: $VERSION"

      - name: Generate release notes
        id: release_notes
        run: |
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "# DeepWiki MCP Server Extension ${{ steps.tag_info.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "A **Model Context Protocol (MCP) server extension** for the Zed IDE that provides seamless integration with DeepWiki and Devin AI documentation services." >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 🚀 Features" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "- **Free DeepWiki Access**: Query public repository documentation" >> $GITHUB_OUTPUT
          echo "- **Devin AI Integration**: Enhanced AI-powered documentation with API key" >> $GITHUB_OUTPUT
          echo "- **Automatic Proxy Management**: Downloads platform-specific proxy binary automatically" >> $GITHUB_OUTPUT
          echo "- **Type-Safe Configuration**: JSON schema validation for settings" >> $GITHUB_OUTPUT
          echo "- **Cross-Platform**: Supports Linux, macOS, and Windows" >> $GITHUB_OUTPUT
          echo "- **Separated Architecture**: WASM extension + native proxy for optimal performance" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 📦 Installation" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Via Zed Extensions Registry (Recommended)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "1. Open Zed" >> $GITHUB_OUTPUT
          echo "2. Open Command Palette (\`Cmd/Ctrl+Shift+P\`)" >> $GITHUB_OUTPUT
          echo "3. Type: \"zed: extensions\"" >> $GITHUB_OUTPUT
          echo "4. Search for: \"DeepWiki MCP\"" >> $GITHUB_OUTPUT
          echo "5. Click Install" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Manual Installation" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "1. Download \`deepwiki-mcp-server-extension.tar.gz\` from this release" >> $GITHUB_OUTPUT
          echo "2. Extract the archive" >> $GITHUB_OUTPUT
          echo "3. In Zed, use \"Extensions: Install Dev Extension\"" >> $GITHUB_OUTPUT
          echo "4. Select the extracted directory" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## ⚙️ Configuration" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Add to your Zed \`settings.json\`:" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "\`\`\`json" >> $GITHUB_OUTPUT
          echo "{" >> $GITHUB_OUTPUT
          echo "  \"context_servers\": {" >> $GITHUB_OUTPUT
          echo "    \"deepwiki-mcp-server\": {" >> $GITHUB_OUTPUT
          echo "      \"endpoint\": \"https://mcp.deepwiki.com\"" >> $GITHUB_OUTPUT
          echo "    }" >> $GITHUB_OUTPUT
          echo "  }" >> $GITHUB_OUTPUT
          echo "}" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 🔧 Proxy Binary" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "This extension automatically downloads the proxy binary from:" >> $GITHUB_OUTPUT
          echo "[zed-mcp-proxy releases](https://github.com/keshav1998/zed-mcp-proxy/releases)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 📚 Documentation" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "- [README](https://github.com/keshav1998/deepwiki-mcp-server/blob/main/README.md)" >> $GITHUB_OUTPUT
          echo "- [Configuration Guide](https://github.com/keshav1998/deepwiki-mcp-server/blob/main/docs/DOCS.md)" >> $GITHUB_OUTPUT
          echo "- [Build Instructions](https://github.com/keshav1998/deepwiki-mcp-server/blob/main/docs/BUILD.md)" >> $GITHUB_OUTPUT
          echo "- [Contributing](https://github.com/keshav1998/deepwiki-mcp-server/blob/main/CONTRIBUTING.md)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 🐛 Reporting Issues" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Please report issues at: https://github.com/keshav1998/deepwiki-mcp-server/issues" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Built with ❤️ for the Zed community**" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_info.outputs.TAG_NAME }}
          name: DeepWiki MCP Server Extension ${{ steps.tag_info.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_BODY }}
          files: |
            deepwiki-mcp-server-extension.tar.gz
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Release Summary
        run: |
          echo "🎉 Extension Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.create-release.outputs.TAG_NAME || env.GITHUB_REF_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.create-release.outputs.VERSION || 'Latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Extension Package**: deepwiki-mcp-server-extension.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Extension is available for download from the release" >> $GITHUB_STEP_SUMMARY
          echo "2. Users can install via Zed Extensions Registry" >> $GITHUB_STEP_SUMMARY
          echo "3. Extension will automatically download proxy binary from zed-mcp-proxy repository" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Release automation completed successfully!"
